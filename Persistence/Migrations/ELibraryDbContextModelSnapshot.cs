// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ELibraryDbContext))]
    partial class ELibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.AccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_access_types");

                    b.ToTable("access_types", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Agreement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AgreedWithPublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("agreed_with_publisher_id");

                    b.Property<long?>("AgreedWithUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("agreed_with_user_id");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<string>("ContractPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("contract_path");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<int>("LicenseId")
                        .HasColumnType("integer")
                        .HasColumnName("license_id");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signed_at");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<long?>("SubmissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("submission_id");

                    b.Property<DateTime?>("TerminatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("terminated_at");

                    b.Property<string>("TerminationDocPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("termination_doc_path");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("termination_reason");

                    b.HasKey("Id")
                        .HasName("pk_agreements");

                    b.HasIndex("AgreedWithPublisherId")
                        .HasDatabaseName("ix_agreements_agreed_with_publisher_id");

                    b.HasIndex("AgreedWithUserId")
                        .HasDatabaseName("ix_agreements_agreed_with_user_id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_agreements_book_id");

                    b.HasIndex("LicenseId")
                        .HasDatabaseName("ix_agreements_license_id");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_agreements_manager_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_agreements_status_id");

                    b.HasIndex("SubmissionId")
                        .HasDatabaseName("ix_agreements_submission_id");

                    b.ToTable("agreements", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.AgreementStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_agreement_statuses");

                    b.ToTable("agreement_statuses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<bool>("MarketingAgreement")
                        .HasColumnType("boolean")
                        .HasColumnName("marketing_agreement");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("patronymic");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.AuthorCreation", b =>
                {
                    b.Property<long>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("creation_id");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.HasKey("CreationId", "AuthorId")
                        .HasName("pk_author_creations");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_author_creations_author_id");

                    b.ToTable("author_creations", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.BBK", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_bbk");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_bbk_code");

                    b.ToTable("bbk", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BBKId")
                        .HasColumnType("integer")
                        .HasColumnName("bbk_id");

                    b.Property<string>("CoverPath")
                        .HasColumnType("text")
                        .HasColumnName("cover_path");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("description");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("isbn");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<long?>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    b.Property<DateTime?>("PubliсationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("publiсation_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<int?>("UDKId")
                        .HasColumnType("integer")
                        .HasColumnName("udk_id");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("BBKId")
                        .HasDatabaseName("ix_books_bbk_id");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasDatabaseName("ix_books_isbn");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_books_publisher_id");

                    b.HasIndex("UDKId")
                        .HasDatabaseName("ix_books_udk_id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.BookView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("viewed_at");

                    b.HasKey("Id")
                        .HasName("pk_book_views");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_views_book_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_book_views_user_id");

                    b.ToTable("book_views", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_name");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.CategoryBook", b =>
                {
                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.HasKey("BookId", "CategoryId")
                        .HasName("pk_category_books");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_category_books_category_id");

                    b.ToTable("category_books", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.CategorySubscriptionAccessRule", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int>("SubscriptionAccessRuleId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_access_rule_id");

                    b.HasKey("CategoryId", "SubscriptionAccessRuleId")
                        .HasName("pk_category_subscription_access_rules");

                    b.HasIndex("SubscriptionAccessRuleId")
                        .HasDatabaseName("ix_category_subscription_access_rules_subscription_access_rule");

                    b.ToTable("category_subscription_access_rules", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.CodeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_code_types");

                    b.ToTable("code_types", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Contributor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_contributors");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_contributors_user_id");

                    b.ToTable("contributors", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.ContributorBook", b =>
                {
                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("ContributorId")
                        .HasColumnType("bigint")
                        .HasColumnName("contributor_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("BookId", "ContributorId")
                        .HasName("pk_contributor_books");

                    b.HasIndex("ContributorId")
                        .HasDatabaseName("ix_contributor_books_contributor_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_contributor_books_role_id");

                    b.ToTable("contributor_books", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.ContributorRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_contributor_roles");

                    b.ToTable("contributor_roles", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Creation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("WrittenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("written_at");

                    b.HasKey("Id")
                        .HasName("pk_creations");

                    b.ToTable("creations", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.CreationBook", b =>
                {
                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("creation_id");

                    b.HasKey("BookId", "CreationId")
                        .HasName("pk_creation_books");

                    b.HasIndex("CreationId")
                        .HasDatabaseName("ix_creation_books_creation_id");

                    b.ToTable("creation_books", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_genres_name");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.GenreCreation", b =>
                {
                    b.Property<long>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("creation_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.HasKey("CreationId", "GenreId")
                        .HasName("pk_genre_creations");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_genre_creations_genre_id");

                    b.ToTable("genre_creations", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_licenses");

                    b.ToTable("licenses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_orders_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasCheckConstraint("ck_order_total_amount", "total_amount >= 0");
                        });
                });

            modelBuilder.Entity("Persistence.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("item_price");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_order_items_book_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasCheckConstraint("ck_order_item_item_price", "item_price >= 0");
                        });
                });

            modelBuilder.Entity("Persistence.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_order_statuses");

                    b.ToTable("order_statuses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancellation_date");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<long?>("UserSubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_payments_payment_method_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_payments_status_id");

                    b.HasIndex("UserSubscriptionId")
                        .HasDatabaseName("ix_payments_user_subscription_id");

                    b.ToTable("payments", null, t =>
                        {
                            t.HasCheckConstraint("ck_payment_amount", "amount >= 0");
                        });
                });

            modelBuilder.Entity("Persistence.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_payment_methods");

                    b.ToTable("payment_methods", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_payment_statuses");

                    b.ToTable("payment_statuses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.PriceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("new_price");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("old_price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_price_histories");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_price_histories_book_id");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_price_histories_manager_id");

                    b.ToTable("price_histories", null, t =>
                        {
                            t.HasCheckConstraint("ck_price_history_new_price", "new_price >= 0");

                            t.HasCheckConstraint("ck_price_history_old_price", "old_price >= 0");
                        });
                });

            modelBuilder.Entity("Persistence.Models.Promotion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_amount");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_promotions");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_promotions_book_id");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_promotions_manager_id");

                    b.ToTable("promotions", null, t =>
                        {
                            t.HasCheckConstraint("ck_promotion_discount_amount", "discount_amount >= 0");
                        });
                });

            modelBuilder.Entity("Persistence.Models.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_publishers");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("DeletedById")
                        .HasColumnType("bigint")
                        .HasColumnName("deleted_by_id");

                    b.Property<bool>("DeletedBySystem")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted_by_system");

                    b.Property<bool>("IsDelited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delited");

                    b.Property<DateTime?>("ModeratedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("moderated_at");

                    b.Property<long?>("ModeratedById")
                        .HasColumnType("bigint")
                        .HasColumnName("moderated_by_id");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("rating");

                    b.Property<long>("ReaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("reader_id");

                    b.Property<string>("Rejectionreason")
                        .HasColumnType("text")
                        .HasColumnName("rejectionreason");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_reviews_book_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_reviews_deleted_by_id");

                    b.HasIndex("ReaderId")
                        .HasDatabaseName("ix_reviews_reader_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_reviews_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.ToTable("reviews", null, t =>
                        {
                            t.HasCheckConstraint("ck_review_rating", "rating >= 0 AND rating <= 5");
                        });
                });

            modelBuilder.Entity("Persistence.Models.ReviewStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_review_statuses");

                    b.ToTable("review_statuses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint")
                        .HasColumnName("creation_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocumentsPath")
                        .HasColumnType("text")
                        .HasColumnName("documents_path");

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint")
                        .HasColumnName("manager_id");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_at");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<long?>("SubmittedByPublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("submitted_by_publisher_id");

                    b.Property<long?>("SubmittedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("submitted_by_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_submissions");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_submissions_book_id");

                    b.HasIndex("CreationId")
                        .HasDatabaseName("ix_submissions_creation_id");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("ix_submissions_manager_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_submissions_status_id");

                    b.HasIndex("SubmittedByPublisherId")
                        .HasDatabaseName("ix_submissions_submitted_by_publisher_id");

                    b.HasIndex("SubmittedByUserId")
                        .HasDatabaseName("ix_submissions_submitted_by_user_id");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.SubmissionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_submission_statuses");

                    b.ToTable("submission_statuses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionAccessRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_plan_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_access_rules");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_subscription_access_rules_subscription_plan_id");

                    b.ToTable("subscription_access_rules", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_date");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("UserSubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription_items");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_subscription_items_book_id");

                    b.HasIndex("UserSubscriptionId")
                        .HasDatabaseName("ix_subscription_items_user_subscription_id");

                    b.ToTable("subscription_items", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("integer")
                        .HasColumnName("duration_in_months");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plans");

                    b.ToTable("subscription_plans", null, t =>
                        {
                            t.HasCheckConstraint("ck_subscription_plan_duration_in_months", "duration_in_months >= 1 AND duration_in_months <= 12");

                            t.HasCheckConstraint("ck_subscription_plan_price", "price >= 0");
                        });
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_subscription_statuses");

                    b.ToTable("subscription_statuses", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("ix_tags_created_by_user_id");

                    b.HasIndex("Name", "CreatedByUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_tags_name_created_by_user_id")
                        .HasFilter("\"is_system\"=false");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.UDK", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_udk");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_udk_code");

                    b.ToTable("udk", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.UserCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<int>("CodeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("code_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_codes");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_user_codes_code")
                        .HasFilter("\"is_used\"=false");

                    b.HasIndex("CodeTypeId")
                        .HasDatabaseName("ix_user_codes_code_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_codes_user_id");

                    b.ToTable("user_codes", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.UserLibrary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("access_type_id");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_libraries");

                    b.HasIndex("AccessTypeId")
                        .HasDatabaseName("ix_user_libraries_access_type_id");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_user_libraries_book_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_user_libraries_tag_id");

                    b.HasIndex("UserId", "BookId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_libraries_user_id_book_id");

                    b.ToTable("user_libraries", (string)null);
                });

            modelBuilder.Entity("Persistence.Models.UserSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int?>("RebillId")
                        .HasColumnType("integer")
                        .HasColumnName("rebill_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_plan_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_subscriptions");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_user_subscriptions_status_id");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_user_subscriptions_subscription_plan_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_subscriptions_user_id");

                    b.ToTable("user_subscriptions", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Persistence.Models.Agreement", b =>
                {
                    b.HasOne("Persistence.Models.Publisher", "AgreedWithPublisher")
                        .WithMany("Agreements")
                        .HasForeignKey("AgreedWithPublisherId")
                        .HasConstraintName("fk_agreements_publishers_agreed_with_publisher_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "AgreedWithUser")
                        .WithMany("ContributorAgreements")
                        .HasForeignKey("AgreedWithUserId")
                        .HasConstraintName("fk_agreements_asp_net_users_agreed_with_user_id");

                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("Agreements")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agreements_books_book_id");

                    b.HasOne("Persistence.Models.License", "License")
                        .WithMany("Agreements")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agreements_licenses_license_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "Manager")
                        .WithMany("ManagerAgreements")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agreements_asp_net_users_manager_id");

                    b.HasOne("Persistence.Models.AgreementStatus", "Status")
                        .WithMany("Agreements")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_agreements_agreement_statuses_status_id");

                    b.HasOne("Persistence.Models.Submission", "Submission")
                        .WithMany("Agreements")
                        .HasForeignKey("SubmissionId")
                        .HasConstraintName("fk_agreements_submissions_submission_id");

                    b.Navigation("AgreedWithPublisher");

                    b.Navigation("AgreedWithUser");

                    b.Navigation("Book");

                    b.Navigation("License");

                    b.Navigation("Manager");

                    b.Navigation("Status");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("Persistence.Models.AuthorCreation", b =>
                {
                    b.HasOne("Persistence.Models.Contributor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_creations_contributors_author_id");

                    b.HasOne("Persistence.Models.Creation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_creations_creations_creation_id");

                    b.Navigation("Author");

                    b.Navigation("Creation");
                });

            modelBuilder.Entity("Persistence.Models.Book", b =>
                {
                    b.HasOne("Persistence.Models.BBK", "BBK")
                        .WithMany("Books")
                        .HasForeignKey("BBKId")
                        .HasConstraintName("fk_books_bbk_bbk_id");

                    b.HasOne("Persistence.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("fk_books_publishers_publisher_id");

                    b.HasOne("Persistence.Models.UDK", "UDK")
                        .WithMany("Books")
                        .HasForeignKey("UDKId")
                        .HasConstraintName("fk_books_udk_udk_id");

                    b.Navigation("BBK");

                    b.Navigation("Publisher");

                    b.Navigation("UDK");
                });

            modelBuilder.Entity("Persistence.Models.BookView", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("BookViews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_views_books_book_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "User")
                        .WithMany("BookViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_views_users_user_id");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Models.CategoryBook", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_books_books_book_id");

                    b.HasOne("Persistence.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_books_categories_category_id");

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Persistence.Models.CategorySubscriptionAccessRule", b =>
                {
                    b.HasOne("Persistence.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_subscription_access_rules_categories_category_id");

                    b.HasOne("Persistence.Models.SubscriptionAccessRule", "SubscriptionAccessRule")
                        .WithMany()
                        .HasForeignKey("SubscriptionAccessRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_subscription_access_rules_subscription_access_rule");

                    b.Navigation("Category");

                    b.Navigation("SubscriptionAccessRule");
                });

            modelBuilder.Entity("Persistence.Models.Contributor", b =>
                {
                    b.HasOne("Persistence.Models.ApplicationUser", "User")
                        .WithOne("Contributor")
                        .HasForeignKey("Persistence.Models.Contributor", "UserId")
                        .HasConstraintName("fk_contributors_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Models.ContributorBook", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("ContributorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contributor_books_books_book_id");

                    b.HasOne("Persistence.Models.Contributor", "Contributor")
                        .WithMany("ContributorBooks")
                        .HasForeignKey("ContributorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contributor_books_contributors_contributor_id");

                    b.HasOne("Persistence.Models.ContributorRole", "Role")
                        .WithMany("ContributorBooks")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contributor_books_contributor_roles_role_id");

                    b.Navigation("Book");

                    b.Navigation("Contributor");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Persistence.Models.CreationBook", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_creation_books_books_book_id");

                    b.HasOne("Persistence.Models.Creation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_creation_books_creations_creation_id");

                    b.Navigation("Book");

                    b.Navigation("Creation");
                });

            modelBuilder.Entity("Persistence.Models.GenreCreation", b =>
                {
                    b.HasOne("Persistence.Models.Creation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_creations_creations_creation_id");

                    b.HasOne("Persistence.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre_creations_genres_genre_id");

                    b.Navigation("Creation");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Persistence.Models.Order", b =>
                {
                    b.HasOne("Persistence.Models.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_statuses_status_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Models.OrderItem", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_books_book_id");

                    b.HasOne("Persistence.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Persistence.Models.Payment", b =>
                {
                    b.HasOne("Persistence.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_payments_orders_order_id");

                    b.HasOne("Persistence.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_methods_payment_method_id");

                    b.HasOne("Persistence.Models.PaymentStatus", "Status")
                        .WithMany("Payments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_statuses_status_id");

                    b.HasOne("Persistence.Models.UserSubscription", "UserSubscription")
                        .WithMany()
                        .HasForeignKey("UserSubscriptionId")
                        .HasConstraintName("fk_payments_user_subscriptions_user_subscription_id");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Status");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("Persistence.Models.PriceHistory", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("PriceHistories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_histories_books_book_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "Manager")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_price_histories_users_manager_id");

                    b.Navigation("Book");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Persistence.Models.Promotion", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("Promotions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promotions_books_book_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "Manager")
                        .WithMany("Promotions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promotions_users_manager_id");

                    b.Navigation("Book");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Persistence.Models.Review", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_books_book_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_reviews_asp_net_users_deleted_by_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "Reader")
                        .WithMany("ReaderReviews")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_asp_net_users_reader_id");

                    b.HasOne("Persistence.Models.ReviewStatus", "Status")
                        .WithMany("Reviews")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_review_statuses_status_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "ModeratedBy")
                        .WithMany("ManagedReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_asp_net_users_user_id");

                    b.Navigation("Book");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModeratedBy");

                    b.Navigation("Reader");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Persistence.Models.Submission", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("Submissions")
                        .HasForeignKey("BookId")
                        .HasConstraintName("fk_submissions_books_book_id");

                    b.HasOne("Persistence.Models.Creation", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId")
                        .HasConstraintName("fk_submissions_creations_creation_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "Manager")
                        .WithMany("ManagerSubmissions")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_asp_net_users_manager_id");

                    b.HasOne("Persistence.Models.SubmissionStatus", "Status")
                        .WithMany("Submissions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submissions_submission_statuses_status_id");

                    b.HasOne("Persistence.Models.Publisher", "SubmittedByPublisher")
                        .WithMany("Submissions")
                        .HasForeignKey("SubmittedByPublisherId")
                        .HasConstraintName("fk_submissions_publishers_submitted_by_publisher_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "SubmittedByUser")
                        .WithMany("ContributorSubmissions")
                        .HasForeignKey("SubmittedByUserId")
                        .HasConstraintName("fk_submissions_asp_net_users_submitted_by_user_id");

                    b.Navigation("Book");

                    b.Navigation("Creation");

                    b.Navigation("Manager");

                    b.Navigation("Status");

                    b.Navigation("SubmittedByPublisher");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionAccessRule", b =>
                {
                    b.HasOne("Persistence.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_access_rules_subscription_plans_subscription_p");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionItem", b =>
                {
                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("SubscriptionItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_items_books_book_id");

                    b.HasOne("Persistence.Models.UserSubscription", "UserSubscription")
                        .WithMany()
                        .HasForeignKey("UserSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_items_user_subscriptions_user_subscription_id");

                    b.Navigation("Book");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("Persistence.Models.Tag", b =>
                {
                    b.HasOne("Persistence.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("Tags")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("fk_tags_users_created_by_user_id");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Persistence.Models.UserCode", b =>
                {
                    b.HasOne("Persistence.Models.CodeType", "CodeType")
                        .WithMany("UserCodes")
                        .HasForeignKey("CodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_codes_code_types_code_type_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "User")
                        .WithMany("UserCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_codes_users_user_id");

                    b.Navigation("CodeType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Models.UserLibrary", b =>
                {
                    b.HasOne("Persistence.Models.AccessType", "AccessType")
                        .WithMany("UserLibraries")
                        .HasForeignKey("AccessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_libraries_access_types_access_type_id");

                    b.HasOne("Persistence.Models.Book", "Book")
                        .WithMany("UserLibraries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_libraries_books_book_id");

                    b.HasOne("Persistence.Models.Tag", "Tag")
                        .WithMany("TaggedBooks")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_user_libraries_tags_tag_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "User")
                        .WithMany("UserLibraries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_libraries_users_user_id");

                    b.Navigation("AccessType");

                    b.Navigation("Book");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Models.UserSubscription", b =>
                {
                    b.HasOne("Persistence.Models.SubscriptionStatus", "Status")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_subscription_statuses_status_id");

                    b.HasOne("Persistence.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_subscription_plans_subscription_plan_id");

                    b.HasOne("Persistence.Models.ApplicationUser", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_subscriptions_users_user_id");

                    b.Navigation("Status");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Persistence.Models.AccessType", b =>
                {
                    b.Navigation("UserLibraries");
                });

            modelBuilder.Entity("Persistence.Models.AgreementStatus", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("Persistence.Models.ApplicationUser", b =>
                {
                    b.Navigation("BookViews");

                    b.Navigation("Contributor");

                    b.Navigation("ContributorAgreements");

                    b.Navigation("ContributorSubmissions");

                    b.Navigation("ManagedReviews");

                    b.Navigation("ManagerAgreements");

                    b.Navigation("ManagerSubmissions");

                    b.Navigation("Orders");

                    b.Navigation("PriceHistories");

                    b.Navigation("Promotions");

                    b.Navigation("ReaderReviews");

                    b.Navigation("Tags");

                    b.Navigation("UserCodes");

                    b.Navigation("UserLibraries");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Persistence.Models.BBK", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Persistence.Models.Book", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("BookViews");

                    b.Navigation("ContributorBooks");

                    b.Navigation("OrderItems");

                    b.Navigation("PriceHistories");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");

                    b.Navigation("Submissions");

                    b.Navigation("SubscriptionItems");

                    b.Navigation("UserLibraries");
                });

            modelBuilder.Entity("Persistence.Models.CodeType", b =>
                {
                    b.Navigation("UserCodes");
                });

            modelBuilder.Entity("Persistence.Models.Contributor", b =>
                {
                    b.Navigation("ContributorBooks");
                });

            modelBuilder.Entity("Persistence.Models.ContributorRole", b =>
                {
                    b.Navigation("ContributorBooks");
                });

            modelBuilder.Entity("Persistence.Models.License", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("Persistence.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Persistence.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Persistence.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Persistence.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Persistence.Models.Publisher", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Books");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Persistence.Models.ReviewStatus", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Persistence.Models.Submission", b =>
                {
                    b.Navigation("Agreements");
                });

            modelBuilder.Entity("Persistence.Models.SubmissionStatus", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Persistence.Models.SubscriptionStatus", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Persistence.Models.Tag", b =>
                {
                    b.Navigation("TaggedBooks");
                });

            modelBuilder.Entity("Persistence.Models.UDK", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
